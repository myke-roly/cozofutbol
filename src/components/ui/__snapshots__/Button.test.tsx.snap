// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button renders correctly 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  testID="btn-presable-view"
>
  <View
    collapsable={false}
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#232323",
        "borderRadius": 8,
        "borderWidth": 1,
        "elevation": 5,
        "justifyContent": "center",
        "opacity": 1,
        "paddingHorizontal": 8,
        "paddingVertical": 16,
        "shadowColor": "#232323",
        "shadowOffset": {
          "height": 2,
          "width": 2,
        },
        "shadowOpacity": 1,
        "transform": [
          {
            "scale": 1,
          },
        ],
        "width": "100%",
      }
    }
  >
    <Text
      style={
        {
          "color": "#fafafa",
          "fontSize": 16,
        }
      }
    >
      test-title
    </Text>
  </View>
</View>
`;

exports[`Button renders correctly with disabled 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": true,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  testID="btn-presable-view"
>
  <View
    collapsable={false}
    style={
      {
        "alignItems": "center",
        "backgroundColor": "#232323",
        "borderRadius": 8,
        "borderWidth": 1,
        "elevation": 5,
        "justifyContent": "center",
        "opacity": 1,
        "paddingHorizontal": 8,
        "paddingVertical": 16,
        "shadowColor": "#232323",
        "shadowOffset": {
          "height": 2,
          "width": 2,
        },
        "shadowOpacity": 1,
        "transform": [
          {
            "scale": 1,
          },
        ],
        "width": "100%",
      }
    }
  >
    <Text
      style={
        {
          "color": "#fafafa",
          "fontSize": 16,
        }
      }
    >
      test-title
    </Text>
  </View>
</View>
`;

exports[`Button renders correctly with outline variant 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  testID="btn-presable-view"
>
  <View
    collapsable={false}
    style={
      {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderColor": "#232323",
        "borderRadius": 8,
        "borderWidth": 1,
        "elevation": 0,
        "justifyContent": "center",
        "opacity": 1,
        "paddingHorizontal": 8,
        "paddingVertical": 16,
        "shadowColor": "#232323",
        "shadowOffset": {
          "height": 2,
          "width": 2,
        },
        "shadowOpacity": 1,
        "transform": [
          {
            "scale": 1,
          },
        ],
        "width": "100%",
      }
    }
  >
    <Text
      style={
        {
          "color": "#232323",
          "fontSize": 16,
        }
      }
    >
      test-title
    </Text>
  </View>
</View>
`;

exports[`Button renders correctly with text variant 1`] = `
<View
  accessibilityState={
    {
      "busy": undefined,
      "checked": undefined,
      "disabled": undefined,
      "expanded": undefined,
      "selected": undefined,
    }
  }
  accessibilityValue={
    {
      "max": undefined,
      "min": undefined,
      "now": undefined,
      "text": undefined,
    }
  }
  accessible={true}
  collapsable={false}
  focusable={true}
  onBlur={[Function]}
  onClick={[Function]}
  onFocus={[Function]}
  onResponderGrant={[Function]}
  onResponderMove={[Function]}
  onResponderRelease={[Function]}
  onResponderTerminate={[Function]}
  onResponderTerminationRequest={[Function]}
  onStartShouldSetResponder={[Function]}
  testID="btn-presable-view"
>
  <View
    collapsable={false}
    style={
      {
        "alignItems": "center",
        "backgroundColor": "transparent",
        "borderRadius": 8,
        "borderWidth": 0,
        "elevation": 0,
        "justifyContent": "center",
        "opacity": 1,
        "paddingHorizontal": 8,
        "paddingVertical": 16,
        "shadowColor": "#232323",
        "shadowOffset": {
          "height": 2,
          "width": 2,
        },
        "shadowOpacity": 1,
        "transform": [
          {
            "scale": 1,
          },
        ],
        "width": "100%",
      }
    }
  >
    <Text
      style={
        {
          "color": "#232323",
          "fontSize": 16,
        }
      }
    >
      test-title
    </Text>
  </View>
</View>
`;
