// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ContentWithButtonsLayout Should render correctly if isfocued is true 1`] = `
<View
  style={
    {
      "backgroundColor": "#fafafa",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      [
        {
          "alignSelf": "center",
          "flex": 1,
          "marginVertical": 24,
          "width": "90%",
        },
        {
          "marginBottom": 0,
        },
      ]
    }
    keyboardShouldPersistTaps="handled"
  >
    <View />
  </RCTScrollView>
  <View
    onLayout={[Function]}
    style={
      [
        {
          "backgroundColor": "#fafafa",
          "bottom": 0,
          "paddingHorizontal": 24,
          "paddingVertical": 16,
          "position": "absolute",
          "width": "100%",
        },
        {
          "elevation": 10,
          "shadowColor": "#232323",
          "shadowOffset": {
            "height": 10,
            "width": 0,
          },
        },
      ]
    }
    testID="buttons-view"
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      testID="btn-presable-view"
    >
      <View
        collapsable={false}
        style={
          {
            "alignItems": "center",
            "backgroundColor": "#232323",
            "borderRadius": 8,
            "borderWidth": 1,
            "elevation": 5,
            "justifyContent": "center",
            "opacity": 1,
            "paddingHorizontal": 8,
            "paddingVertical": 16,
            "shadowColor": "#232323",
            "shadowOffset": {
              "height": 2,
              "width": 2,
            },
            "shadowOpacity": 1,
            "transform": [
              {
                "scale": 1,
              },
            ],
            "width": "100%",
          }
        }
      >
        <Text
          style={
            {
              "color": "#fafafa",
              "fontSize": 16,
            }
          }
        >
          primary-title-test
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`ContentWithButtonsLayout Should render correctly onLayout sets the buttons height 1`] = `
<View
  style={
    {
      "backgroundColor": "#fafafa",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      [
        {
          "alignSelf": "center",
          "flex": 1,
          "marginVertical": 24,
          "width": "90%",
        },
        {
          "marginBottom": 100,
        },
      ]
    }
    keyboardShouldPersistTaps="handled"
  >
    <View />
  </RCTScrollView>
  <View
    onLayout={[Function]}
    style={
      [
        {
          "backgroundColor": "#fafafa",
          "bottom": 0,
          "paddingHorizontal": 24,
          "paddingVertical": 16,
          "position": "absolute",
          "width": "100%",
        },
        false,
      ]
    }
    testID="buttons-view"
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      testID="btn-presable-view"
    >
      <View
        collapsable={false}
        style={
          {
            "alignItems": "center",
            "backgroundColor": "#232323",
            "borderRadius": 8,
            "borderWidth": 1,
            "elevation": 5,
            "justifyContent": "center",
            "opacity": 1,
            "paddingHorizontal": 8,
            "paddingVertical": 16,
            "shadowColor": "#232323",
            "shadowOffset": {
              "height": 2,
              "width": 2,
            },
            "shadowOpacity": 1,
            "transform": [
              {
                "scale": 1,
              },
            ],
            "width": "100%",
          }
        }
      >
        <Text
          style={
            {
              "color": "#fafafa",
              "fontSize": 16,
            }
          }
        >
          primary-title-test
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`ContentWithButtonsLayout Should render correctly with secondary button outline variant 1`] = `
<View
  style={
    {
      "backgroundColor": "#fafafa",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      [
        {
          "alignSelf": "center",
          "flex": 1,
          "marginVertical": 24,
          "width": "90%",
        },
        {
          "marginBottom": 0,
        },
      ]
    }
    keyboardShouldPersistTaps="handled"
  >
    <View />
  </RCTScrollView>
  <View
    onLayout={[Function]}
    style={
      [
        {
          "backgroundColor": "#fafafa",
          "bottom": 0,
          "paddingHorizontal": 24,
          "paddingVertical": 16,
          "position": "absolute",
          "width": "100%",
        },
        false,
      ]
    }
    testID="buttons-view"
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      testID="btn-presable-view"
    >
      <View
        collapsable={false}
        style={
          {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "borderColor": "#232323",
            "borderRadius": 8,
            "borderWidth": 1,
            "elevation": 0,
            "justifyContent": "center",
            "opacity": 1,
            "paddingHorizontal": 8,
            "paddingVertical": 16,
            "shadowColor": "#232323",
            "shadowOffset": {
              "height": 2,
              "width": 2,
            },
            "shadowOpacity": 1,
            "transform": [
              {
                "scale": 1,
              },
            ],
            "width": "100%",
          }
        }
      >
        <Text
          style={
            {
              "color": "#232323",
              "fontSize": 16,
            }
          }
        >
          primary-title-test
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`ContentWithButtonsLayout should render correctly 1`] = `
<View
  style={
    {
      "backgroundColor": "#fafafa",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      [
        {
          "alignSelf": "center",
          "flex": 1,
          "marginVertical": 24,
          "width": "90%",
        },
        {
          "marginBottom": 0,
        },
      ]
    }
    keyboardShouldPersistTaps="handled"
  >
    <View />
  </RCTScrollView>
</View>
`;

exports[`ContentWithButtonsLayout should render correctly with children 1`] = `
<View
  style={
    {
      "backgroundColor": "#fafafa",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      [
        {
          "alignSelf": "center",
          "flex": 1,
          "marginVertical": 24,
          "width": "90%",
        },
        {
          "marginBottom": 0,
        },
      ]
    }
    keyboardShouldPersistTaps="handled"
  >
    <View>
      <View>
        <Text
          style={
            [
              undefined,
              {
                "fontSize": 16,
              },
            ]
          }
        >
          Child Content 1
        </Text>
      </View>
    </View>
  </RCTScrollView>
</View>
`;

exports[`ContentWithButtonsLayout should render correctly with primary and secondary button 1`] = `
<View
  style={
    {
      "backgroundColor": "#fafafa",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      [
        {
          "alignSelf": "center",
          "flex": 1,
          "marginVertical": 24,
          "width": "90%",
        },
        {
          "marginBottom": 0,
        },
      ]
    }
    keyboardShouldPersistTaps="handled"
  >
    <View />
  </RCTScrollView>
  <View
    onLayout={[Function]}
    style={
      [
        {
          "backgroundColor": "#fafafa",
          "bottom": 0,
          "paddingHorizontal": 24,
          "paddingVertical": 16,
          "position": "absolute",
          "width": "100%",
        },
        false,
      ]
    }
    testID="buttons-view"
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      testID="btn-presable-view"
    >
      <View
        collapsable={false}
        style={
          {
            "alignItems": "center",
            "backgroundColor": "#232323",
            "borderRadius": 8,
            "borderWidth": 1,
            "elevation": 5,
            "justifyContent": "center",
            "opacity": 1,
            "paddingHorizontal": 8,
            "paddingVertical": 16,
            "shadowColor": "#232323",
            "shadowOffset": {
              "height": 2,
              "width": 2,
            },
            "shadowOpacity": 1,
            "transform": [
              {
                "scale": 1,
              },
            ],
            "width": "100%",
          }
        }
      >
        <Text
          style={
            {
              "color": "#fafafa",
              "fontSize": 16,
            }
          }
        >
          primary-title-test
        </Text>
      </View>
    </View>
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      testID="btn-presable-view"
    >
      <View
        collapsable={false}
        style={
          {
            "alignItems": "center",
            "backgroundColor": "transparent",
            "borderRadius": 8,
            "borderWidth": 0,
            "elevation": 0,
            "justifyContent": "center",
            "opacity": 1,
            "paddingHorizontal": 8,
            "paddingVertical": 16,
            "shadowColor": "#232323",
            "shadowOffset": {
              "height": 2,
              "width": 2,
            },
            "shadowOpacity": 1,
            "transform": [
              {
                "scale": 1,
              },
            ],
            "width": "100%",
          }
        }
      >
        <Text
          style={
            {
              "color": "#232323",
              "fontSize": 16,
            }
          }
        >
          secondary-title-test
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`ContentWithButtonsLayout should render correctly with primary button 1`] = `
<View
  style={
    {
      "backgroundColor": "#fafafa",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      [
        {
          "alignSelf": "center",
          "flex": 1,
          "marginVertical": 24,
          "width": "90%",
        },
        {
          "marginBottom": 0,
        },
      ]
    }
    keyboardShouldPersistTaps="handled"
  >
    <View />
  </RCTScrollView>
  <View
    onLayout={[Function]}
    style={
      [
        {
          "backgroundColor": "#fafafa",
          "bottom": 0,
          "paddingHorizontal": 24,
          "paddingVertical": 16,
          "position": "absolute",
          "width": "100%",
        },
        false,
      ]
    }
    testID="buttons-view"
  >
    <View
      accessibilityState={
        {
          "busy": undefined,
          "checked": undefined,
          "disabled": undefined,
          "expanded": undefined,
          "selected": undefined,
        }
      }
      accessibilityValue={
        {
          "max": undefined,
          "min": undefined,
          "now": undefined,
          "text": undefined,
        }
      }
      accessible={true}
      collapsable={false}
      focusable={true}
      onBlur={[Function]}
      onClick={[Function]}
      onFocus={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      testID="btn-presable-view"
    >
      <View
        collapsable={false}
        style={
          {
            "alignItems": "center",
            "backgroundColor": "#232323",
            "borderRadius": 8,
            "borderWidth": 1,
            "elevation": 5,
            "justifyContent": "center",
            "opacity": 1,
            "paddingHorizontal": 8,
            "paddingVertical": 16,
            "shadowColor": "#232323",
            "shadowOffset": {
              "height": 2,
              "width": 2,
            },
            "shadowOpacity": 1,
            "transform": [
              {
                "scale": 1,
              },
            ],
            "width": "100%",
          }
        }
      >
        <Text
          style={
            {
              "color": "#fafafa",
              "fontSize": 16,
            }
          }
        >
          primary-title-test
        </Text>
      </View>
    </View>
  </View>
</View>
`;

exports[`ContentWithButtonsLayout should render correctly with secondary button 1`] = `
<View
  style={
    {
      "backgroundColor": "#fafafa",
      "flex": 1,
    }
  }
>
  <RCTScrollView
    contentContainerStyle={
      [
        {
          "alignSelf": "center",
          "flex": 1,
          "marginVertical": 24,
          "width": "90%",
        },
        {
          "marginBottom": 0,
        },
      ]
    }
    keyboardShouldPersistTaps="handled"
  >
    <View />
  </RCTScrollView>
</View>
`;
